(
deffacts PersonasFamilia
    (Persona Yolanda M)
    (Persona Chema V)
    (Persona David V)
    (Persona Jose V)
    (Persona Nacho V)
    (Persona Rafa V)
    (Persona Mari M)
    (Persona Joni V)
    (Persona Sergio V)
    (Persona Rafalin V)
    (Persona Pilar M)
    (Persona Pepe V)
    (Persona Pepe2 V)
    (Persona Maria M)
    (Persona Silvia M)
    (Persona Antonio V)
    (Persona Vivi M)
    (Persona Pepe3 V)
    (Persona Clauda M)
    (Persona Martina M)
)
(
deffacts ParentescosFamilia
    (Relacion Yolanda Chema casados)
    (Relacion Mari Rafa casados)
    (Relacion David Chema hijo)
    (Relacion Jose Yolanda hijo)
    (Relacion Nacho Yolanda hijo)
    (Relacion Rafalin Rafa hijo)
    (Relacion Joni Rafa hijo)
    (Relacion Sergio Mari hijo)
    (Relacion Pepe Pilar casados)
    (Relacion Chema Pilar hijo)
    (Relacion Maria Pepe2 casados)
    (Relacion Yolanda Maria hijo)
    (Relacion Mari Maria hijo)
    (Relacion Silvia Pilar hijo)
    (Relacion Silvia Antonio casados)
    (Relacion Vivi Pilar hijo)
    (Relacion Vivi Pepe3 casados)
    (Relacion Claudia Silvia hijo)
    (Relacion Martina Antonio hijo)
)
(
defrule Casados
    (Persona ?n1 ?)
    (Persona ?n2&~n1 ?)
    (Relacion ?n1 ?n2 casados)
    => (assert (Relacion ?n2 ?n1 casados))
)
(
defrule Hijos
    (Persona ?n1 ?)
    (Persona ?n2&~?n1 ?)
    (Persona ?n3&~?n2&~?n1 ?)
    (Relacion ?n1 ?n2 casados)
    (Relacion ?n3 ?n1 hijo)
    => (assert (Relacion ?n3 ?n2 hijo))
)
(
defrule Hermanos
    (Persona ?n1 ?)
    (Persona ?n2&~?n1 ?)
    (Persona ?n3&~?n2&~?n1 ?)
    (Relacion ?n2 ?n1 hijo)
    (Relacion ?n3 ?n1 hijo)
    => (assert (Relacion ?n2 ?n3 hermano))
    (assert (Relacion ?n3 ?n2 hermano))
)
(
defrule Tio
    (Persona ?n1 ?)
    (Persona ?n2&~?n1 ?)
    (Persona ?n3&~?n2&~?n1 ?)
    (Relacion ?n1 ?n2 hermano)
    (Relacion ?n3 ?n2 hijo)
    => (assert (Relacion ?n1 ?n3 tio))
)
(
defrule HerenciaRelaciones
    (Persona ?n1 ?)
    (Persona ?n2&~?n1 ?)
    (Persona ?n3&~?n2&~?n1 ?)
    (Relacion ?n1 ?n2 casados)
    (Relacion ?n2 ?n3 ?rel&~hijo&~hermano&~cuniado)
    => (assert (Relacion ?n1 ?n3 ?rel))
)
(
defrule Abuelo
    (Persona ?n1 ?)
    (Persona ?n2&~?n1 ?)
    (Persona ?n3&~?n2&~?n1 ?)
    (Relacion ?n1 ?n2 hijo)
    (Relacion ?n2 ?n3 hijo)
    => (assert (Relacion ?n3 ?n1 abuelo))
)
(
defrule Primo
    (Persona ?n1 ?)
    (Persona ?n2&~?n1 ?)
    (Persona ?n3&~?n2&~?n1 ?)
    (Relacion ?n1 ?n2 tio)
    (Relacion ?n3 ?n1 hijo)
    => (assert (Relacion ?n3 ?n2 primo))
    (assert (Relacion ?n2 ?n3 primo))
)
(
defrule Suegro
    (Persona ?n1 ?)
    (Persona ?n2&~?n1 ?)
    (Persona ?n3&~?n2&~?n1 ?)
    (Relacion ?n1 ?n2 hijo)
    (Relacion ?n1 ?n3 casados)
    => (assert (Relacion ?n2 ?n3 suegro))
)
(
defrule Cuniado
    (Persona ?n1 ?)
    (Persona ?n2&~?n1 ?)
    (Persona ?n3&~?n2&~?n1 ?)
    (Relacion ?n1 ?n2 casados)
    (Relacion ?n2 ?n3 hermano)
    => (assert (Relacion ?n1 ?n3 cuniado))
    (assert (Relacion ?n3 ?n1 cuniado))
)
(
defrule CuniadoExt
    (Persona ?n1 ?)
    (Persona ?n2&~?n1 ?)
    (Persona ?n3&~?n2&~?n1 ?)
    (Persona ?n4&~?n2&~?n1&~n3 ?)
    (Relacion ?n1 ?n2 casados)
    (Relacion ?n2 ?n3 hermano)
    (Relacion ?n4 ?n3 casados)
    => (assert (Relacion ?n1 ?n4 cuniado))
    (assert (Relacion ?n4 ?n1 cuniado))
)
